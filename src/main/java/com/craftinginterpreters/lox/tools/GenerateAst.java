package com.craftinginterpreters.lox.tools;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

/**
 * Generate abstract class Expr with all kinds of expressions like:
 *
 * expression → assignment ;
 * assignment → identifier "=" assignment | logic_or ;
 * logic_or   → logic_and ( "or" logic_and )* ;
 * logic_and  → equality ( "and" equality )* ;
 * unary ->  ( "-" | "!" ) expression
 * binary -> expression operator expression
 * grouping -> "(" expression ")"
 * literal -> NUMBER | STRING | "true" | "false" | "nil" ;
 * call  → primary ( "(" arguments? ")" )* ;
 * arguments → expression ( "," expression )* ;
 *
 * And also generate abstract class Stmt with statements like:
 *
 *declaration → classDecl | funDecl | varDecl | statement ;
 * statement → exprStmt | ifStmt | printStmt | whileStmt | block | forStmt | returnStmt;
 * exprStmt  → expression ";" ;
 * printStmt → "print" expression ";" ;
 * block     → "{" declaration* "}" ;
 * ifStmt    → "if" "(" expression ")" statement ( "else" statement )? ;
 * whileStmt → "while" "(" expression ")" statement ;
 * forStmt   → "for" "(" ( varDecl | exprStmt | ";" ) expression? ";"expression? ")" statement ;
 * funDecl  → "fun" function ;
 * function → IDENTIFIER "(" parameters? ")" block ;
 * returnStmt → "return" expression? ";" ;
 * classDecl   → "class" IDENTIFIER "{" function* "}" ;
 */
public class GenerateAst {
    public static void main(String[] args) throws IOException {
       /* if (args.length != 1) {
            System.err.println("Usage: generate_ast <output directory>");
            System.exit(1);
        }
        String outputDir = args[0];*/
        String outputDir = "src/main/java/com/craftinginterpreters/lox/interpreter";
        defineAst(outputDir, "ExprG", Arrays.asList(
                "Assign   : Token name, Expr value",
                "Binary   : Expr left, Token operator, Expr right",
                "Grouping : Expr expression",
                "Literal  : Object value",
                "Logical  : Expr left, Token operator, Expr right",
                "Unary    : Token operator, Expr right",
                "Variable : Token name",
                "Call     : Expr callee, Token paren, List<Expr> arguments",
                //for anonymous functions as parameters
                "Function   : Token name, List<Token> parameters, List<Stmt> body"
        ));

        defineAst(outputDir, "StmtG", Arrays.asList(
                "Expression : Expr expression",
                "Print      : Expr expression",
                "Var        : Token name, Expr initializer",
                "Block      : List<Stmt> statements",
                "If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
                "While      : Expr condition, Stmt body",
                "Function   : Token name, List<Token> parameters, List<Stmt> body",
                "Return     : Token keyword, Expr value",
                "Class      : Token name, List<Stmt.Function> methods"
        ));
    }

    private static void defineAst(
            String outputDir, String baseName, List<String> types)
            throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        PrintWriter writer = new PrintWriter(path, "UTF-8");

        writer.println("package com.craftinginterpreters.lox.interpreter;");
        writer.println("");
        writer.println("import java.util.List;");
        writer.println("import com.craftinginterpreters.lox.tokens.Token;");
        writer.println("");
        writer.println("/** Generated by GenerateAst.java class */");
        writer.println("");
        writer.println("public abstract class " + baseName + " {");

        defineVisitor(writer, baseName, types);

        // The AST classes
        for (String type : types) {
            String className = type.split(":")[0].trim();
            String fields = type.split(":")[1].trim();
            defineType(writer, baseName, className, fields);
        }

        // The base accept() method.
        writer.println("");
        writer.println(" public abstract <R> R accept(Visitor<R> visitor);");

        writer.println("}");
        writer.close();
    }

    private static void defineType(
            PrintWriter writer, String baseName,
            String className, String fieldList) {
        writer.println("");
        writer.println("  public static class " + className + " extends " +
                baseName + " {");

        // Add Constructor
        writer.println("    " + className + "(" + fieldList + ") {");

        // Store parameters in fields
        String[] fields = fieldList.split(", ");
        for (String field : fields) {
            String name = field.split(" ")[1];
            writer.println("      this." + name + " = " + name + ";");
        }

        writer.println("    }");

        // Visitor pattern
        writer.println();
        writer.println("    public <R> R accept(Visitor<R> visitor) {");
        writer.println("      return visitor.visit" +
                className + baseName + "(this);");
        writer.println("    }");

        // Fields
        writer.println();
        for (String field : fields) {
            writer.println("    final " + field + ";");
        }

        writer.println("  }");
    }

    private static void defineVisitor(
            PrintWriter writer, String baseName, List<String> types) {
        writer.println("  public interface Visitor<R> {");

        for (String type : types) {
            String typeName = type.split(":")[0].trim();
            writer.println("    public R visit" + typeName + baseName + "(" +
                    typeName + " " + baseName.toLowerCase() + ");");
        }

        writer.println("  }");
    }
}
