package com.craftinginterpreters.lox.interpreter;

import com.craftinginterpreters.lox.tokens.Token;

import java.util.List;

/**
 * Generated by GenerateAst.java class
 */

public abstract class Stmt {
    public interface Visitor<R> {
        public R visitExpressionStmt(Expression stmt);

        public R visitPrintStmt(Print stmt);

        public R visitVarStmt(Var stmt);

        public R visitBlockStmt(Block stmt);

        public R visitIfStmt(If stmt);

        public R visitWhileStmt(While stmt);

        public R visitFunctionStmt(Function stmt);

        public R visitReturnStmt(Return stmt);

        public R visitClassStmt(Class stmt);
    }

    /**
     * exprStmt  → expression ";" ;
     */
    public static class Expression extends Stmt {
        public Expression(Expr expression) {
            this.expression = expression;
        }

        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitExpressionStmt(this);
        }

        public final Expr expression;
    }

    /**
     * printStmt → "print" expression ";" ;
     */
    public static class Print extends Stmt {
        public Print(Expr expression) {
            this.expression = expression;
        }

       public <R> R accept(Visitor<R> visitor) {
            return visitor.visitPrintStmt(this);
        }

        public final Expr expression;
    }

    /**
     * varDecl → "var" IDENTIFIER ( "=" expression )? ";" ;
     */
    public static class Var extends Stmt {
        public Var(Token name, Expr initializer) {
            this.name = name;
            this.initializer = initializer;
        }

        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitVarStmt(this);
        }

        public final Token name;
        public final Expr initializer;
    }

    /**
     * block     → "{" declaration* "}" ;
     */
    public static class Block extends Stmt {
        public Block(List<Stmt> statements) {
            this.statements = statements;
        }

        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitBlockStmt(this);
        }

        public final List<Stmt> statements;
    }

    /**
     * ifStmt    → "if" "(" expression ")" statement ( "else" statement )? ;
     */
    public static class If extends Stmt {
        public If(Expr condition, Stmt thenBranch, Stmt elseBranch) {
            this.condition = condition;
            this.thenBranch = thenBranch;
            this.elseBranch = elseBranch;
        }

        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitIfStmt(this);
        }

        public final Expr condition;
        public final Stmt thenBranch;
        public final Stmt elseBranch;
    }

    public static class While extends Stmt {
        public While(Expr condition, Stmt body) {
            this.condition = condition;
            this.body = body;
        }

        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitWhileStmt(this);
        }

        public final Expr condition;
        public final Stmt body;
    }

    public static class Function extends Stmt {
        public Function(Token name, List<Token> parameters, List<Stmt> body) {
            this.name = name;
            this.parameters = parameters;
            this.body = body;
        }

        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitFunctionStmt(this);
        }

        public final Token name;
        public final List<Token> parameters;
        public final List<Stmt> body;
    }

    /**
     * returnStmt → "return" expression? ";" ;
     */
    public static class Return extends Stmt {
        public Return(Token keyword, Expr value) {
            this.keyword = keyword;
            this.value = value;
        }

        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitReturnStmt(this);
        }

        public final Token keyword;
        public final Expr value;
    }

    /**
     * classDecl   → "class" IDENTIFIER "{" function* "}" ;
     */
    public static class Class extends Stmt {
        public Class(Token name, List<Stmt.Function> methods) {
            this.name = name;
            this.methods = methods;
        }

        public <R> R accept(Visitor<R> visitor) {
            return visitor.visitClassStmt(this);
        }

        public final Token name;
        final List<Stmt.Function> methods;
    }

    public abstract <R> R accept(Visitor<R> visitor);
}
